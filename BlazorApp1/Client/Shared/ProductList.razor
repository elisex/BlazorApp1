@inject IProductService ProductService
@implements IDisposable

<ul class="list-unstyled">
    @foreach(var product in ProductService.Products)
    {
        <li class="product-container">
            <div class="image-container">
                <a href="/product/@product.Id">
                    <img class="media-img" src="@product.Image" alt="@product.Title" />
                </a>
            </div>
            <div class="product-details">
                <a href="/product/@product.Id">
                    <h4 class="product-title">@product.Title</h4>
                </a>
                <br />
                <p class="product-decription">@product.Description</p>
                <br />
                <h5 class="product-price">
                    @GetPriceText(product)
                </h5>
            </div>
        </li>
    }
</ul>

@code {
    //[Parameter]
    //public int? CategoryId { get; set; } = null;
    protected override void OnInitialized()
    {
        // await ProductService.LoadProducts();
        ProductService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        ProductService.OnChange -= StateHasChanged;
    }

    private string GetPriceText(Product product)
    {
        var variants = product.Variants;
        if (variants.Count == 0)
        {
            return string.Empty;
        }
        else if (variants.Count == 1)
        {
            return $"£{variants[0].Price}";
        }
        decimal minPrice = variants.Min(v => v.Price);
        return $"Starting at £{minPrice}";
    }
}